rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier le rôle de l'utilisateur
    function hasRole(role) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Fonction pour vérifier si l'utilisateur est le propriétaire de la demande
    function isRequestOwner(requestData) {
      return (isAuthenticated() && requestData.userId == request.auth.uid) ||
             (!isAuthenticated() && requestData.userId == 'anonymous');
    }

    // Nouvelle fonction pour vérifier le mode de dispatch
    function isDispatcherMode() {
      let settings = get(/databases/$(database)/documents/settings/dispatch);
      return settings != null && settings.data.dispatchMode == 'dispatcher';
    }

    // Règles pour la collection settings
    match /settings/{settingId} {
      // Tout le monde peut lire les paramètres système
      allow read: if true;
      // Seul l'admin peut modifier les paramètres
      allow write: if isAuthenticated() && hasRole('admin');
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if 
        get(/databases/$(database)/documents/users/$(userId)).data.role == 'mechanic' ||
        (isAuthenticated() && (
          request.auth.uid == userId ||
          hasRole('admin') ||
          hasRole('dispatcher')
        ));
        
      allow write: if isAuthenticated() && 
        (request.auth.uid == userId || hasRole('admin'));
    }

    // Règles pour la collection helpRequests
    match /helpRequests/{requestId} {
      allow create: if true;
      
      allow read: if 
        (isAuthenticated() && request.auth.uid == resource.data.userId) ||
        (!isAuthenticated() && resource.data.userId == 'anonymous') ||
        hasRole('mechanic') || 
        hasRole('admin') || 
        hasRole('dispatcher');
      
      allow update: if 
        isAuthenticated() &&
        (
          // Les mécaniciens peuvent mettre à jour si :
          (hasRole('mechanic') && (
            // Peut accepter une nouvelle demande seulement en mode auto
            (!isDispatcherMode() && resource.data.status == 'pending' && request.resource.data.status == 'accepted') ||
            // Peut refuser une demande
            (resource.data.status == 'pending' && request.resource.data.status == 'rejected') ||
            // Peut mettre à jour une demande qu'il a acceptée
            (resource.data.mechanicId == request.auth.uid)
          )) ||
          // Le propriétaire de la demande peut annuler
          (resource.data.userId == request.auth.uid && request.resource.data.status == 'cancelled') ||
          // Les dispatchers peuvent assigner des demandes en mode dispatcher
          (hasRole('dispatcher') && isDispatcherMode() && (
            // Peut assigner une demande à un mécanicien
            (resource.data.status == 'pending' && request.resource.data.status == 'assigned') ||
            // Peut réassigner une demande
            (resource.data.status == 'assigned' && request.resource.data.status == 'assigned')
          )) ||
          // Les admins peuvent tout faire
          hasRole('admin')
        );

      // Suppression non autorisée
      allow delete: if false;
    }

    // Règles par défaut pour les autres collections
    match /{document=**} {
      allow read: if isAuthenticated() &&
        (hasRole('admin') || hasRole('dispatcher'));
      allow write: if isAuthenticated() && hasRole('admin');
    }
  }
} 